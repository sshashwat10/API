# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BuulEd0NerNktQbZS4LD53wNWHNP6HiY
"""

!pip install face_recognition
import numpy as np
import cv2
import face_recognition
from flask import Flask, request, Response, jsonify
from flask_restful import Api, Resource
from pymongo import MongoClient
import os
import time
from dotenv import load_dotenv



app = Flask(__name__)
api = Api(app)

load_dotenv()
mongo_url = os.getenv('MONGO_URL')
print(mongo_url)

#connect mongodb
client=MongoClient(mongo_url)
db = client.faceEnco  #replace with your db name
collection = db.myColl #replace with your collection name

# Cache for known face encodings
known_face_encodings = []
known_face_names = []
last_updated = time.time()  # Timestamp of last update

def fetch_known_face_encodings():
    global known_face_encodings, known_face_names, last_updated
    known_face_encodings = []
    known_face_names = []

    employees = collection.find()
    for employee in employees:
        known_face_encodings.append(np.array(employee['face_encoding']))
        known_face_names.append({'name': employee['name'], 'id': employee['_id']})

    last_updated = time.time()

def register_face(name, face_encoding):
    # Insert face data into MongoDB
    collection.insert_one({'name': name, 'face_encoding': face_encoding.tolist()})
    fetch_known_face_encodings()  # Update cache

def check_login(face_encoding):
    global known_face_encodings, known_face_names

    # Check if the provided face encoding matches any known face encoding
    matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
    if True in matches:
        first_match_index = matches.index(True)
        return known_face_names[first_match_index]
    else:
        return None

class RegisterFace(Resource):
    def post(self):
        # Get name and image file from request
        # data = request.get_json()
        # name = data['name']
        name=request.form['name']
       # id=data['id']
        image_file = request.files['image']

        # Read image from file
        nparr = np.frombuffer(image_file.read(), np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

        # Convert image to RGB
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        # Detect faces
        faces = face_recognition.face_locations(rgb_img)

        for top, right, bottom, left in faces:
            face_encoding = face_recognition.face_encodings(rgb_img, [(top, right, bottom, left)])[0]
            register_face(name, face_encoding)
            return {"message": "Registration successful!"}, 200

        return {"error": "Failed to register face. No face found in the image."}, 400

class RecognizeFace(Resource):
    def post(self):
        # Get image file from request
        image_file = request.files['image']

        # Read image from file
        nparr = np.frombuffer(image_file.read(), np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

        # Convert image to RGB
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        # Detect faces
        faces = face_recognition.face_locations(rgb_img)

        for top, right, bottom, left in faces:
            # Detect face encodings
            face_encodings = face_recognition.face_encodings(rgb_img, [(top, right, bottom, left)])
            if face_encodings:
                face_encoding = face_encodings[0]
                # Check if recognized
                recognition_result = check_login(face_encoding)
                if recognition_result:
                    return {"name": recognition_result['name'], "id": str(recognition_result['id'])}, 200

        # If no face is recognized or login fails, return error
        return {"error": "Login failed. Face not recognized."}, 401

# Adding resources to API
api.add_resource(RegisterFace, '/register')
api.add_resource(RecognizeFace, '/login')

if __name__ == '__main__':
    fetch_known_face_encodings()
    app.run(debug=True)